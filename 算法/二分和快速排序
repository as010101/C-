#include <iostream>
#include <vector>
 
int binarySearch(std::vector<int> &vec,int target)
{
    int low = 0;
    int high = vec.size()-1;
    int mid=0;
    while (low <=high)
    {
        mid = (low + high) / 2;  //注意每次mid更新的位置
        if (vec[mid] == target)
        {
             
            while(vec[mid-1]==target) //保证取到的是第一个target
            {
                mid--;
            }
             
            return mid + 1;
        }
        else if(vec[mid]<target)
        { 
            low = mid + 1;
        }
        else
        {
            high = mid - 1;
        }
    }
    return vec.size() + 1;
 
 
 
 
 
}
 
int main()
{
 
    int len=0;
    int target = 0;
 
    std::cin >> len;
    std::cin >> target;
 
    int ele; 
    std::vector<int> vec;
    while (std::cin >> ele)
    {
        vec.push_back(ele);
        if (vec.size() == len)
            break;
    }
     
    std::cout<<binarySearch(vec, target);
}













//从某种意义上讲，快排也是某种程度的二分法

#include<bits/stdc++.h>
using namespace std;
 
void quickSort(std::vector<int> &arr, int left,int right)
{
 
 if (left >= right) return ;   //注意是大于等于
    int p1 = left;
    int p2 = right;
    int pivot = arr[p1];
    while (p1 < p2)
    {
        while (p1 < p2 && arr[p2] >= pivot)
        {p2--;
        }
        arr[p1] = arr[p2];
        while (p1 < p2 && arr[p1] <= pivot)
        {p1++;}
        arr[p2] = arr[p1];
    }
    arr[p1] = pivot;
    quickSort(arr, left, p1 - 1); //这儿left不能传0，因为右边递归的left不为0
    quickSort(arr, p1 + 1, right);
 
}
 
int main()
{
 
    int len=0;
    int target = 0;
 
    std::cin >> len;
    int ele;
    std::vector<int> vec;
    while (std::cin >> ele)
    {
        vec.push_back(ele);
        if (vec.size() == len)
            break;
    }
    quickSort(vec, 0, len - 1);
     
    for (int i=0;i<len;i++)
    {
        if (i == 0)
        {std::cout << vec[i];
        continue;
        }
        std::cout<<' '<<vec[i];
    }
}


